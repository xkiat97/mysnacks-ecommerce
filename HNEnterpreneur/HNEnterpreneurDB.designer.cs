#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HNEnterpreneur
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HNEnterpreneurDB")]
	public partial class HNEnterpreneurDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBidding(Bidding instance);
    partial void UpdateBidding(Bidding instance);
    partial void DeleteBidding(Bidding instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertFood(Food instance);
    partial void UpdateFood(Food instance);
    partial void DeleteFood(Food instance);
    partial void InsertIng_list(Ing_list instance);
    partial void UpdateIng_list(Ing_list instance);
    partial void DeleteIng_list(Ing_list instance);
    partial void InsertIngredient(Ingredient instance);
    partial void UpdateIngredient(Ingredient instance);
    partial void DeleteIngredient(Ingredient instance);
    partial void InsertOrder_list(Order_list instance);
    partial void UpdateOrder_list(Order_list instance);
    partial void DeleteOrder_list(Order_list instance);
    partial void InsertQuotation(Quotation instance);
    partial void UpdateQuotation(Quotation instance);
    partial void DeleteQuotation(Quotation instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertBidder(Bidder instance);
    partial void UpdateBidder(Bidder instance);
    partial void DeleteBidder(Bidder instance);
    #endregion
		
		public HNEnterpreneurDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HNEnterpreneurDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HNEnterpreneurDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HNEnterpreneurDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HNEnterpreneurDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HNEnterpreneurDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bidding> Biddings
		{
			get
			{
				return this.GetTable<Bidding>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Food> Foods
		{
			get
			{
				return this.GetTable<Food>();
			}
		}
		
		public System.Data.Linq.Table<Ing_list> Ing_lists
		{
			get
			{
				return this.GetTable<Ing_list>();
			}
		}
		
		public System.Data.Linq.Table<Ingredient> Ingredients
		{
			get
			{
				return this.GetTable<Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<Order_list> Order_lists
		{
			get
			{
				return this.GetTable<Order_list>();
			}
		}
		
		public System.Data.Linq.Table<Quotation> Quotations
		{
			get
			{
				return this.GetTable<Quotation>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Bidder> Bidders
		{
			get
			{
				return this.GetTable<Bidder>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bidding")]
	public partial class Bidding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bidID;
		
		private double _quantity;
		
		private double _maxPrice;
		
		private string _urgency;
		
		private System.DateTime _deliveryDate;
		
		private string _desc;
		
		private char _status;
		
		private int _ingID;
		
		private System.Nullable<System.DateTime> _date;
		
		private EntitySet<Quotation> _Quotations;
		
		private EntityRef<Ingredient> _Ingredient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbidIDChanging(int value);
    partial void OnbidIDChanged();
    partial void OnquantityChanging(double value);
    partial void OnquantityChanged();
    partial void OnmaxPriceChanging(double value);
    partial void OnmaxPriceChanged();
    partial void OnurgencyChanging(string value);
    partial void OnurgencyChanged();
    partial void OndeliveryDateChanging(System.DateTime value);
    partial void OndeliveryDateChanged();
    partial void OndescChanging(string value);
    partial void OndescChanged();
    partial void OnstatusChanging(char value);
    partial void OnstatusChanged();
    partial void OningIDChanging(int value);
    partial void OningIDChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    #endregion
		
		public Bidding()
		{
			this._Quotations = new EntitySet<Quotation>(new Action<Quotation>(this.attach_Quotations), new Action<Quotation>(this.detach_Quotations));
			this._Ingredient = default(EntityRef<Ingredient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bidID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bidID
		{
			get
			{
				return this._bidID;
			}
			set
			{
				if ((this._bidID != value))
				{
					this.OnbidIDChanging(value);
					this.SendPropertyChanging();
					this._bidID = value;
					this.SendPropertyChanged("bidID");
					this.OnbidIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Float NOT NULL")]
		public double quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxPrice", DbType="Float NOT NULL")]
		public double maxPrice
		{
			get
			{
				return this._maxPrice;
			}
			set
			{
				if ((this._maxPrice != value))
				{
					this.OnmaxPriceChanging(value);
					this.SendPropertyChanging();
					this._maxPrice = value;
					this.SendPropertyChanged("maxPrice");
					this.OnmaxPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_urgency", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string urgency
		{
			get
			{
				return this._urgency;
			}
			set
			{
				if ((this._urgency != value))
				{
					this.OnurgencyChanging(value);
					this.SendPropertyChanging();
					this._urgency = value;
					this.SendPropertyChanged("urgency");
					this.OnurgencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deliveryDate", DbType="DateTime NOT NULL")]
		public System.DateTime deliveryDate
		{
			get
			{
				return this._deliveryDate;
			}
			set
			{
				if ((this._deliveryDate != value))
				{
					this.OndeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._deliveryDate = value;
					this.SendPropertyChanged("deliveryDate");
					this.OndeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[desc]", Storage="_desc", DbType="VarChar(1000)")]
		public string desc
		{
			get
			{
				return this._desc;
			}
			set
			{
				if ((this._desc != value))
				{
					this.OndescChanging(value);
					this.SendPropertyChanging();
					this._desc = value;
					this.SendPropertyChanged("desc");
					this.OndescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Char(1) NOT NULL")]
		public char status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ingID", DbType="Int NOT NULL")]
		public int ingID
		{
			get
			{
				return this._ingID;
			}
			set
			{
				if ((this._ingID != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OningIDChanging(value);
					this.SendPropertyChanging();
					this._ingID = value;
					this.SendPropertyChanged("ingID");
					this.OningIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bidding_Quotation", Storage="_Quotations", ThisKey="bidID", OtherKey="bidID")]
		public EntitySet<Quotation> Quotations
		{
			get
			{
				return this._Quotations;
			}
			set
			{
				this._Quotations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_Bidding", Storage="_Ingredient", ThisKey="ingID", OtherKey="ingID", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.Biddings.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.Biddings.Add(this);
						this._ingID = value.ingID;
					}
					else
					{
						this._ingID = default(int);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Quotations(Quotation entity)
		{
			this.SendPropertyChanging();
			entity.Bidding = this;
		}
		
		private void detach_Quotations(Quotation entity)
		{
			this.SendPropertyChanging();
			entity.Bidding = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _catId;
		
		private string _name;
		
		private string _description;
		
		private char _status;
		
		private System.TimeSpan _modifiedTime;
		
		private System.DateTime _modifiedDate;
		
		private int _modifiedUser;
		
		private EntitySet<Food> _Foods;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncatIdChanging(int value);
    partial void OncatIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnstatusChanging(char value);
    partial void OnstatusChanged();
    partial void OnmodifiedTimeChanging(System.TimeSpan value);
    partial void OnmodifiedTimeChanged();
    partial void OnmodifiedDateChanging(System.DateTime value);
    partial void OnmodifiedDateChanged();
    partial void OnmodifiedUserChanging(int value);
    partial void OnmodifiedUserChanged();
    #endregion
		
		public Category()
		{
			this._Foods = new EntitySet<Food>(new Action<Food>(this.attach_Foods), new Action<Food>(this.detach_Foods));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int catId
		{
			get
			{
				return this._catId;
			}
			set
			{
				if ((this._catId != value))
				{
					this.OncatIdChanging(value);
					this.SendPropertyChanging();
					this._catId = value;
					this.SendPropertyChanged("catId");
					this.OncatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(1000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Char(1) NOT NULL")]
		public char status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedTime", DbType="Time NOT NULL")]
		public System.TimeSpan modifiedTime
		{
			get
			{
				return this._modifiedTime;
			}
			set
			{
				if ((this._modifiedTime != value))
				{
					this.OnmodifiedTimeChanging(value);
					this.SendPropertyChanging();
					this._modifiedTime = value;
					this.SendPropertyChanged("modifiedTime");
					this.OnmodifiedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedDate", DbType="Date NOT NULL")]
		public System.DateTime modifiedDate
		{
			get
			{
				return this._modifiedDate;
			}
			set
			{
				if ((this._modifiedDate != value))
				{
					this.OnmodifiedDateChanging(value);
					this.SendPropertyChanging();
					this._modifiedDate = value;
					this.SendPropertyChanged("modifiedDate");
					this.OnmodifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedUser", DbType="Int NOT NULL")]
		public int modifiedUser
		{
			get
			{
				return this._modifiedUser;
			}
			set
			{
				if ((this._modifiedUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmodifiedUserChanging(value);
					this.SendPropertyChanging();
					this._modifiedUser = value;
					this.SendPropertyChanged("modifiedUser");
					this.OnmodifiedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Food", Storage="_Foods", ThisKey="catId", OtherKey="catId")]
		public EntitySet<Food> Foods
		{
			get
			{
				return this._Foods;
			}
			set
			{
				this._Foods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Category", Storage="_User", ThisKey="modifiedUser", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._modifiedUser = value.userId;
					}
					else
					{
						this._modifiedUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Food")]
	public partial class Food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _foodId;
		
		private string _name;
		
		private string _image;
		
		private string _description;
		
		private int _timeUsedSec;
		
		private System.Nullable<int> _quantity;
		
		private double _price;
		
		private char _status;
		
		private System.TimeSpan _modifiedTime;
		
		private System.DateTime _modifiedDate;
		
		private int _modifiedUser;
		
		private int _catId;
		
		private System.Nullable<int> _reservedQty;
		
		private EntitySet<Ing_list> _Ing_lists;
		
		private EntitySet<Order_list> _Order_lists;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfoodIdChanging(int value);
    partial void OnfoodIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OntimeUsedSecChanging(int value);
    partial void OntimeUsedSecChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnstatusChanging(char value);
    partial void OnstatusChanged();
    partial void OnmodifiedTimeChanging(System.TimeSpan value);
    partial void OnmodifiedTimeChanged();
    partial void OnmodifiedDateChanging(System.DateTime value);
    partial void OnmodifiedDateChanged();
    partial void OnmodifiedUserChanging(int value);
    partial void OnmodifiedUserChanged();
    partial void OncatIdChanging(int value);
    partial void OncatIdChanged();
    partial void OnreservedQtyChanging(System.Nullable<int> value);
    partial void OnreservedQtyChanged();
    #endregion
		
		public Food()
		{
			this._Ing_lists = new EntitySet<Ing_list>(new Action<Ing_list>(this.attach_Ing_lists), new Action<Ing_list>(this.detach_Ing_lists));
			this._Order_lists = new EntitySet<Order_list>(new Action<Order_list>(this.attach_Order_lists), new Action<Order_list>(this.detach_Order_lists));
			this._Category = default(EntityRef<Category>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foodId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int foodId
		{
			get
			{
				return this._foodId;
			}
			set
			{
				if ((this._foodId != value))
				{
					this.OnfoodIdChanging(value);
					this.SendPropertyChanging();
					this._foodId = value;
					this.SendPropertyChanged("foodId");
					this.OnfoodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(100)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(1000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeUsedSec", DbType="Int NOT NULL")]
		public int timeUsedSec
		{
			get
			{
				return this._timeUsedSec;
			}
			set
			{
				if ((this._timeUsedSec != value))
				{
					this.OntimeUsedSecChanging(value);
					this.SendPropertyChanging();
					this._timeUsedSec = value;
					this.SendPropertyChanged("timeUsedSec");
					this.OntimeUsedSecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Char(1) NOT NULL")]
		public char status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedTime", DbType="Time NOT NULL")]
		public System.TimeSpan modifiedTime
		{
			get
			{
				return this._modifiedTime;
			}
			set
			{
				if ((this._modifiedTime != value))
				{
					this.OnmodifiedTimeChanging(value);
					this.SendPropertyChanging();
					this._modifiedTime = value;
					this.SendPropertyChanged("modifiedTime");
					this.OnmodifiedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedDate", DbType="Date NOT NULL")]
		public System.DateTime modifiedDate
		{
			get
			{
				return this._modifiedDate;
			}
			set
			{
				if ((this._modifiedDate != value))
				{
					this.OnmodifiedDateChanging(value);
					this.SendPropertyChanging();
					this._modifiedDate = value;
					this.SendPropertyChanged("modifiedDate");
					this.OnmodifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedUser", DbType="Int NOT NULL")]
		public int modifiedUser
		{
			get
			{
				return this._modifiedUser;
			}
			set
			{
				if ((this._modifiedUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmodifiedUserChanging(value);
					this.SendPropertyChanging();
					this._modifiedUser = value;
					this.SendPropertyChanged("modifiedUser");
					this.OnmodifiedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catId", DbType="Int NOT NULL")]
		public int catId
		{
			get
			{
				return this._catId;
			}
			set
			{
				if ((this._catId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatIdChanging(value);
					this.SendPropertyChanging();
					this._catId = value;
					this.SendPropertyChanged("catId");
					this.OncatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reservedQty", DbType="Int")]
		public System.Nullable<int> reservedQty
		{
			get
			{
				return this._reservedQty;
			}
			set
			{
				if ((this._reservedQty != value))
				{
					this.OnreservedQtyChanging(value);
					this.SendPropertyChanging();
					this._reservedQty = value;
					this.SendPropertyChanged("reservedQty");
					this.OnreservedQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Ing_list", Storage="_Ing_lists", ThisKey="foodId", OtherKey="foodID")]
		public EntitySet<Ing_list> Ing_lists
		{
			get
			{
				return this._Ing_lists;
			}
			set
			{
				this._Ing_lists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Order_list", Storage="_Order_lists", ThisKey="foodId", OtherKey="foodId")]
		public EntitySet<Order_list> Order_lists
		{
			get
			{
				return this._Order_lists;
			}
			set
			{
				this._Order_lists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Food", Storage="_Category", ThisKey="catId", OtherKey="catId", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Foods.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Foods.Add(this);
						this._catId = value.catId;
					}
					else
					{
						this._catId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Food", Storage="_User", ThisKey="modifiedUser", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Foods.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Foods.Add(this);
						this._modifiedUser = value.userId;
					}
					else
					{
						this._modifiedUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ing_lists(Ing_list entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_Ing_lists(Ing_list entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
		
		private void attach_Order_lists(Order_list entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_Order_lists(Order_list entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ing_list")]
	public partial class Ing_list : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ingID;
		
		private int _foodID;
		
		private double _qtyNeeded;
		
		private EntityRef<Food> _Food;
		
		private EntityRef<Ingredient> _Ingredient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OningIDChanging(int value);
    partial void OningIDChanged();
    partial void OnfoodIDChanging(int value);
    partial void OnfoodIDChanged();
    partial void OnqtyNeededChanging(double value);
    partial void OnqtyNeededChanged();
    #endregion
		
		public Ing_list()
		{
			this._Food = default(EntityRef<Food>);
			this._Ingredient = default(EntityRef<Ingredient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ingID
		{
			get
			{
				return this._ingID;
			}
			set
			{
				if ((this._ingID != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OningIDChanging(value);
					this.SendPropertyChanging();
					this._ingID = value;
					this.SendPropertyChanged("ingID");
					this.OningIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foodID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int foodID
		{
			get
			{
				return this._foodID;
			}
			set
			{
				if ((this._foodID != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfoodIDChanging(value);
					this.SendPropertyChanging();
					this._foodID = value;
					this.SendPropertyChanged("foodID");
					this.OnfoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qtyNeeded", DbType="Float NOT NULL")]
		public double qtyNeeded
		{
			get
			{
				return this._qtyNeeded;
			}
			set
			{
				if ((this._qtyNeeded != value))
				{
					this.OnqtyNeededChanging(value);
					this.SendPropertyChanging();
					this._qtyNeeded = value;
					this.SendPropertyChanged("qtyNeeded");
					this.OnqtyNeededChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Ing_list", Storage="_Food", ThisKey="foodID", OtherKey="foodId", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.Ing_lists.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.Ing_lists.Add(this);
						this._foodID = value.foodId;
					}
					else
					{
						this._foodID = default(int);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_Ing_list", Storage="_Ingredient", ThisKey="ingID", OtherKey="ingID", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.Ing_lists.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.Ing_lists.Add(this);
						this._ingID = value.ingID;
					}
					else
					{
						this._ingID = default(int);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ingredient")]
	public partial class Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ingID;
		
		private string _name;
		
		private string _desc;
		
		private string _img;
		
		private double _balance;
		
		private string _balanceType;
		
		private char _status;
		
		private System.Nullable<double> _marketPrice;
		
		private EntitySet<Bidding> _Biddings;
		
		private EntitySet<Ing_list> _Ing_lists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OningIDChanging(int value);
    partial void OningIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescChanging(string value);
    partial void OndescChanged();
    partial void OnimgChanging(string value);
    partial void OnimgChanged();
    partial void OnbalanceChanging(double value);
    partial void OnbalanceChanged();
    partial void OnbalanceTypeChanging(string value);
    partial void OnbalanceTypeChanged();
    partial void OnstatusChanging(char value);
    partial void OnstatusChanged();
    partial void OnmarketPriceChanging(System.Nullable<double> value);
    partial void OnmarketPriceChanged();
    #endregion
		
		public Ingredient()
		{
			this._Biddings = new EntitySet<Bidding>(new Action<Bidding>(this.attach_Biddings), new Action<Bidding>(this.detach_Biddings));
			this._Ing_lists = new EntitySet<Ing_list>(new Action<Ing_list>(this.attach_Ing_lists), new Action<Ing_list>(this.detach_Ing_lists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ingID
		{
			get
			{
				return this._ingID;
			}
			set
			{
				if ((this._ingID != value))
				{
					this.OningIDChanging(value);
					this.SendPropertyChanging();
					this._ingID = value;
					this.SendPropertyChanged("ingID");
					this.OningIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[desc]", Storage="_desc", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string desc
		{
			get
			{
				return this._desc;
			}
			set
			{
				if ((this._desc != value))
				{
					this.OndescChanging(value);
					this.SendPropertyChanging();
					this._desc = value;
					this.SendPropertyChanged("desc");
					this.OndescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string img
		{
			get
			{
				return this._img;
			}
			set
			{
				if ((this._img != value))
				{
					this.OnimgChanging(value);
					this.SendPropertyChanging();
					this._img = value;
					this.SendPropertyChanged("img");
					this.OnimgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_balance", DbType="Float NOT NULL")]
		public double balance
		{
			get
			{
				return this._balance;
			}
			set
			{
				if ((this._balance != value))
				{
					this.OnbalanceChanging(value);
					this.SendPropertyChanging();
					this._balance = value;
					this.SendPropertyChanged("balance");
					this.OnbalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_balanceType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string balanceType
		{
			get
			{
				return this._balanceType;
			}
			set
			{
				if ((this._balanceType != value))
				{
					this.OnbalanceTypeChanging(value);
					this.SendPropertyChanging();
					this._balanceType = value;
					this.SendPropertyChanged("balanceType");
					this.OnbalanceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Char(1) NOT NULL")]
		public char status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_marketPrice", DbType="Float")]
		public System.Nullable<double> marketPrice
		{
			get
			{
				return this._marketPrice;
			}
			set
			{
				if ((this._marketPrice != value))
				{
					this.OnmarketPriceChanging(value);
					this.SendPropertyChanging();
					this._marketPrice = value;
					this.SendPropertyChanged("marketPrice");
					this.OnmarketPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_Bidding", Storage="_Biddings", ThisKey="ingID", OtherKey="ingID")]
		public EntitySet<Bidding> Biddings
		{
			get
			{
				return this._Biddings;
			}
			set
			{
				this._Biddings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_Ing_list", Storage="_Ing_lists", ThisKey="ingID", OtherKey="ingID")]
		public EntitySet<Ing_list> Ing_lists
		{
			get
			{
				return this._Ing_lists;
			}
			set
			{
				this._Ing_lists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Biddings(Bidding entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_Biddings(Bidding entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
		
		private void attach_Ing_lists(Ing_list entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_Ing_lists(Ing_list entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Order_list")]
	public partial class Order_list : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _foodId;
		
		private int _orderId;
		
		private int _quantity;
		
		private string _description;
		
		private char _status;
		
		private EntityRef<Food> _Food;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfoodIdChanging(int value);
    partial void OnfoodIdChanged();
    partial void OnorderIdChanging(int value);
    partial void OnorderIdChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnstatusChanging(char value);
    partial void OnstatusChanged();
    #endregion
		
		public Order_list()
		{
			this._Food = default(EntityRef<Food>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foodId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int foodId
		{
			get
			{
				return this._foodId;
			}
			set
			{
				if ((this._foodId != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfoodIdChanging(value);
					this.SendPropertyChanging();
					this._foodId = value;
					this.SendPropertyChanged("foodId");
					this.OnfoodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int orderId
		{
			get
			{
				return this._orderId;
			}
			set
			{
				if ((this._orderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIdChanging(value);
					this.SendPropertyChanging();
					this._orderId = value;
					this.SendPropertyChanged("orderId");
					this.OnorderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(1000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Char(1) NOT NULL")]
		public char status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Order_list", Storage="_Food", ThisKey="foodId", OtherKey="foodId", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.Order_lists.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.Order_lists.Add(this);
						this._foodId = value.foodId;
					}
					else
					{
						this._foodId = default(int);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Order_list", Storage="_Order", ThisKey="orderId", OtherKey="orderId", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Order_lists.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Order_lists.Add(this);
						this._orderId = value.orderId;
					}
					else
					{
						this._orderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Quotation")]
	public partial class Quotation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _quoID;
		
		private System.DateTime _date;
		
		private double _quantity;
		
		private double _price;
		
		private char _status;
		
		private int _bidID;
		
		private int _usrID;
		
		private string _desc;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<Bidding> _Bidding;
		
		private EntityRef<Bidder> _Bidder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnquoIDChanging(int value);
    partial void OnquoIDChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnquantityChanging(double value);
    partial void OnquantityChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnstatusChanging(char value);
    partial void OnstatusChanged();
    partial void OnbidIDChanging(int value);
    partial void OnbidIDChanged();
    partial void OnusrIDChanging(int value);
    partial void OnusrIDChanged();
    partial void OndescChanging(string value);
    partial void OndescChanged();
    #endregion
		
		public Quotation()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Bidding = default(EntityRef<Bidding>);
			this._Bidder = default(EntityRef<Bidder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int quoID
		{
			get
			{
				return this._quoID;
			}
			set
			{
				if ((this._quoID != value))
				{
					this.OnquoIDChanging(value);
					this.SendPropertyChanging();
					this._quoID = value;
					this.SendPropertyChanged("quoID");
					this.OnquoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Float NOT NULL")]
		public double quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Char(1) NOT NULL")]
		public char status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bidID", DbType="Int NOT NULL")]
		public int bidID
		{
			get
			{
				return this._bidID;
			}
			set
			{
				if ((this._bidID != value))
				{
					if (this._Bidding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbidIDChanging(value);
					this.SendPropertyChanging();
					this._bidID = value;
					this.SendPropertyChanged("bidID");
					this.OnbidIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usrID", DbType="Int NOT NULL")]
		public int usrID
		{
			get
			{
				return this._usrID;
			}
			set
			{
				if ((this._usrID != value))
				{
					if (this._Bidder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusrIDChanging(value);
					this.SendPropertyChanging();
					this._usrID = value;
					this.SendPropertyChanged("usrID");
					this.OnusrIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[desc]", Storage="_desc", DbType="VarChar(1000)")]
		public string desc
		{
			get
			{
				return this._desc;
			}
			set
			{
				if ((this._desc != value))
				{
					this.OndescChanging(value);
					this.SendPropertyChanging();
					this._desc = value;
					this.SendPropertyChanged("desc");
					this.OndescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quotation_Transaction", Storage="_Transactions", ThisKey="quoID", OtherKey="quoID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bidding_Quotation", Storage="_Bidding", ThisKey="bidID", OtherKey="bidID", IsForeignKey=true)]
		public Bidding Bidding
		{
			get
			{
				return this._Bidding.Entity;
			}
			set
			{
				Bidding previousValue = this._Bidding.Entity;
				if (((previousValue != value) 
							|| (this._Bidding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bidding.Entity = null;
						previousValue.Quotations.Remove(this);
					}
					this._Bidding.Entity = value;
					if ((value != null))
					{
						value.Quotations.Add(this);
						this._bidID = value.bidID;
					}
					else
					{
						this._bidID = default(int);
					}
					this.SendPropertyChanged("Bidding");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bidder_Quotation", Storage="_Bidder", ThisKey="usrID", OtherKey="usrID", IsForeignKey=true)]
		public Bidder Bidder
		{
			get
			{
				return this._Bidder.Entity;
			}
			set
			{
				Bidder previousValue = this._Bidder.Entity;
				if (((previousValue != value) 
							|| (this._Bidder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bidder.Entity = null;
						previousValue.Quotations.Remove(this);
					}
					this._Bidder.Entity = value;
					if ((value != null))
					{
						value.Quotations.Add(this);
						this._usrID = value.usrID;
					}
					else
					{
						this._usrID = default(int);
					}
					this.SendPropertyChanged("Bidder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Quotation = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Quotation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Transaction]")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _traID;
		
		private System.Nullable<System.DateTime> _receivedTime;
		
		private char _status;
		
		private int _quoID;
		
		private System.Nullable<int> _receivedUser;
		
		private EntityRef<Quotation> _Quotation;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntraIDChanging(int value);
    partial void OntraIDChanged();
    partial void OnreceivedTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnreceivedTimeChanged();
    partial void OnstatusChanging(char value);
    partial void OnstatusChanged();
    partial void OnquoIDChanging(int value);
    partial void OnquoIDChanged();
    partial void OnreceivedUserChanging(System.Nullable<int> value);
    partial void OnreceivedUserChanged();
    #endregion
		
		public Transaction()
		{
			this._Quotation = default(EntityRef<Quotation>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_traID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int traID
		{
			get
			{
				return this._traID;
			}
			set
			{
				if ((this._traID != value))
				{
					this.OntraIDChanging(value);
					this.SendPropertyChanging();
					this._traID = value;
					this.SendPropertyChanged("traID");
					this.OntraIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_receivedTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> receivedTime
		{
			get
			{
				return this._receivedTime;
			}
			set
			{
				if ((this._receivedTime != value))
				{
					this.OnreceivedTimeChanging(value);
					this.SendPropertyChanging();
					this._receivedTime = value;
					this.SendPropertyChanged("receivedTime");
					this.OnreceivedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Char(1) NOT NULL")]
		public char status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quoID", DbType="Int NOT NULL")]
		public int quoID
		{
			get
			{
				return this._quoID;
			}
			set
			{
				if ((this._quoID != value))
				{
					if (this._Quotation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquoIDChanging(value);
					this.SendPropertyChanging();
					this._quoID = value;
					this.SendPropertyChanged("quoID");
					this.OnquoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_receivedUser", DbType="Int")]
		public System.Nullable<int> receivedUser
		{
			get
			{
				return this._receivedUser;
			}
			set
			{
				if ((this._receivedUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreceivedUserChanging(value);
					this.SendPropertyChanging();
					this._receivedUser = value;
					this.SendPropertyChanged("receivedUser");
					this.OnreceivedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quotation_Transaction", Storage="_Quotation", ThisKey="quoID", OtherKey="quoID", IsForeignKey=true)]
		public Quotation Quotation
		{
			get
			{
				return this._Quotation.Entity;
			}
			set
			{
				Quotation previousValue = this._Quotation.Entity;
				if (((previousValue != value) 
							|| (this._Quotation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quotation.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Quotation.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._quoID = value.quoID;
					}
					else
					{
						this._quoID = default(int);
					}
					this.SendPropertyChanged("Quotation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Transaction", Storage="_User", ThisKey="receivedUser", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._receivedUser = value.userId;
					}
					else
					{
						this._receivedUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _settingId;
		
		private System.Nullable<double> _setGSTRate;
		
		private System.Nullable<double> _setCashPerPoint;
		
		private System.Nullable<double> _setPointPerCash;
		
		private System.Nullable<System.TimeSpan> _modifiedTime;
		
		private System.Nullable<System.DateTime> _modifiedDate;
		
		private System.Nullable<int> _modifiedUser;
		
		private System.Nullable<char> _FeasNotification;
		
		private System.Nullable<char> _FeasVarifyAcc;
		
		private string _companyName;
		
		private string _companySlogan;
		
		private string _companyAddress;
		
		private string _companyPhone;
		
		private string _companyEmail;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsettingIdChanging(int value);
    partial void OnsettingIdChanged();
    partial void OnsetGSTRateChanging(System.Nullable<double> value);
    partial void OnsetGSTRateChanged();
    partial void OnsetCashPerPointChanging(System.Nullable<double> value);
    partial void OnsetCashPerPointChanged();
    partial void OnsetPointPerCashChanging(System.Nullable<double> value);
    partial void OnsetPointPerCashChanged();
    partial void OnmodifiedTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnmodifiedTimeChanged();
    partial void OnmodifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnmodifiedDateChanged();
    partial void OnmodifiedUserChanging(System.Nullable<int> value);
    partial void OnmodifiedUserChanged();
    partial void OnFeasNotificationChanging(System.Nullable<char> value);
    partial void OnFeasNotificationChanged();
    partial void OnFeasVarifyAccChanging(System.Nullable<char> value);
    partial void OnFeasVarifyAccChanged();
    partial void OncompanyNameChanging(string value);
    partial void OncompanyNameChanged();
    partial void OncompanySloganChanging(string value);
    partial void OncompanySloganChanged();
    partial void OncompanyAddressChanging(string value);
    partial void OncompanyAddressChanged();
    partial void OncompanyPhoneChanging(string value);
    partial void OncompanyPhoneChanged();
    partial void OncompanyEmailChanging(string value);
    partial void OncompanyEmailChanged();
    #endregion
		
		public Setting()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_settingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int settingId
		{
			get
			{
				return this._settingId;
			}
			set
			{
				if ((this._settingId != value))
				{
					this.OnsettingIdChanging(value);
					this.SendPropertyChanging();
					this._settingId = value;
					this.SendPropertyChanged("settingId");
					this.OnsettingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_setGSTRate", DbType="Float")]
		public System.Nullable<double> setGSTRate
		{
			get
			{
				return this._setGSTRate;
			}
			set
			{
				if ((this._setGSTRate != value))
				{
					this.OnsetGSTRateChanging(value);
					this.SendPropertyChanging();
					this._setGSTRate = value;
					this.SendPropertyChanged("setGSTRate");
					this.OnsetGSTRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_setCashPerPoint", DbType="Float")]
		public System.Nullable<double> setCashPerPoint
		{
			get
			{
				return this._setCashPerPoint;
			}
			set
			{
				if ((this._setCashPerPoint != value))
				{
					this.OnsetCashPerPointChanging(value);
					this.SendPropertyChanging();
					this._setCashPerPoint = value;
					this.SendPropertyChanged("setCashPerPoint");
					this.OnsetCashPerPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_setPointPerCash", DbType="Float")]
		public System.Nullable<double> setPointPerCash
		{
			get
			{
				return this._setPointPerCash;
			}
			set
			{
				if ((this._setPointPerCash != value))
				{
					this.OnsetPointPerCashChanging(value);
					this.SendPropertyChanging();
					this._setPointPerCash = value;
					this.SendPropertyChanged("setPointPerCash");
					this.OnsetPointPerCashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> modifiedTime
		{
			get
			{
				return this._modifiedTime;
			}
			set
			{
				if ((this._modifiedTime != value))
				{
					this.OnmodifiedTimeChanging(value);
					this.SendPropertyChanging();
					this._modifiedTime = value;
					this.SendPropertyChanged("modifiedTime");
					this.OnmodifiedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedDate", DbType="Date")]
		public System.Nullable<System.DateTime> modifiedDate
		{
			get
			{
				return this._modifiedDate;
			}
			set
			{
				if ((this._modifiedDate != value))
				{
					this.OnmodifiedDateChanging(value);
					this.SendPropertyChanging();
					this._modifiedDate = value;
					this.SendPropertyChanged("modifiedDate");
					this.OnmodifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedUser", DbType="Int")]
		public System.Nullable<int> modifiedUser
		{
			get
			{
				return this._modifiedUser;
			}
			set
			{
				if ((this._modifiedUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmodifiedUserChanging(value);
					this.SendPropertyChanging();
					this._modifiedUser = value;
					this.SendPropertyChanged("modifiedUser");
					this.OnmodifiedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeasNotification", DbType="Char(1)")]
		public System.Nullable<char> FeasNotification
		{
			get
			{
				return this._FeasNotification;
			}
			set
			{
				if ((this._FeasNotification != value))
				{
					this.OnFeasNotificationChanging(value);
					this.SendPropertyChanging();
					this._FeasNotification = value;
					this.SendPropertyChanged("FeasNotification");
					this.OnFeasNotificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeasVarifyAcc", DbType="Char(1)")]
		public System.Nullable<char> FeasVarifyAcc
		{
			get
			{
				return this._FeasVarifyAcc;
			}
			set
			{
				if ((this._FeasVarifyAcc != value))
				{
					this.OnFeasVarifyAccChanging(value);
					this.SendPropertyChanging();
					this._FeasVarifyAcc = value;
					this.SendPropertyChanged("FeasVarifyAcc");
					this.OnFeasVarifyAccChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyName", DbType="VarChar(100)")]
		public string companyName
		{
			get
			{
				return this._companyName;
			}
			set
			{
				if ((this._companyName != value))
				{
					this.OncompanyNameChanging(value);
					this.SendPropertyChanging();
					this._companyName = value;
					this.SendPropertyChanged("companyName");
					this.OncompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companySlogan", DbType="VarChar(100)")]
		public string companySlogan
		{
			get
			{
				return this._companySlogan;
			}
			set
			{
				if ((this._companySlogan != value))
				{
					this.OncompanySloganChanging(value);
					this.SendPropertyChanging();
					this._companySlogan = value;
					this.SendPropertyChanged("companySlogan");
					this.OncompanySloganChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyAddress", DbType="VarChar(1000)")]
		public string companyAddress
		{
			get
			{
				return this._companyAddress;
			}
			set
			{
				if ((this._companyAddress != value))
				{
					this.OncompanyAddressChanging(value);
					this.SendPropertyChanging();
					this._companyAddress = value;
					this.SendPropertyChanged("companyAddress");
					this.OncompanyAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyPhone", DbType="VarChar(100)")]
		public string companyPhone
		{
			get
			{
				return this._companyPhone;
			}
			set
			{
				if ((this._companyPhone != value))
				{
					this.OncompanyPhoneChanging(value);
					this.SendPropertyChanging();
					this._companyPhone = value;
					this.SendPropertyChanged("companyPhone");
					this.OncompanyPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyEmail", DbType="VarChar(100)")]
		public string companyEmail
		{
			get
			{
				return this._companyEmail;
			}
			set
			{
				if ((this._companyEmail != value))
				{
					this.OncompanyEmailChanging(value);
					this.SendPropertyChanging();
					this._companyEmail = value;
					this.SendPropertyChanged("companyEmail");
					this.OncompanyEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Setting", Storage="_User", ThisKey="modifiedUser", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Settings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Settings.Add(this);
						this._modifiedUser = value.userId;
					}
					else
					{
						this._modifiedUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private string _name;
		
		private string _email;
		
		private string _password;
		
		private string _userType;
		
		private char _status;
		
		private System.Nullable<int> _regUserId;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Food> _Foods;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<Setting> _Settings;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Member> _Members;
		
		private EntityRef<Bidder> _Bidder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnuserTypeChanging(string value);
    partial void OnuserTypeChanged();
    partial void OnstatusChanging(char value);
    partial void OnstatusChanged();
    partial void OnregUserIdChanging(System.Nullable<int> value);
    partial void OnregUserIdChanged();
    #endregion
		
		public User()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Foods = new EntitySet<Food>(new Action<Food>(this.attach_Foods), new Action<Food>(this.detach_Foods));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Settings = new EntitySet<Setting>(new Action<Setting>(this.attach_Settings), new Action<Setting>(this.detach_Settings));
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			this._Bidder = default(EntityRef<Bidder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string userType
		{
			get
			{
				return this._userType;
			}
			set
			{
				if ((this._userType != value))
				{
					this.OnuserTypeChanging(value);
					this.SendPropertyChanging();
					this._userType = value;
					this.SendPropertyChanged("userType");
					this.OnuserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Char(1) NOT NULL")]
		public char status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regUserId", DbType="Int")]
		public System.Nullable<int> regUserId
		{
			get
			{
				return this._regUserId;
			}
			set
			{
				if ((this._regUserId != value))
				{
					this.OnregUserIdChanging(value);
					this.SendPropertyChanging();
					this._regUserId = value;
					this.SendPropertyChanged("regUserId");
					this.OnregUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Category", Storage="_Categories", ThisKey="userId", OtherKey="modifiedUser")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Food", Storage="_Foods", ThisKey="userId", OtherKey="modifiedUser")]
		public EntitySet<Food> Foods
		{
			get
			{
				return this._Foods;
			}
			set
			{
				this._Foods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Transaction", Storage="_Transactions", ThisKey="userId", OtherKey="receivedUser")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Setting", Storage="_Settings", ThisKey="userId", OtherKey="modifiedUser")]
		public EntitySet<Setting> Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				this._Settings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Address", Storage="_Addresses", ThisKey="userId", OtherKey="memId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_Orders", ThisKey="userId", OtherKey="deliveryUserId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Member", Storage="_Members", ThisKey="userId", OtherKey="userId")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Bidder", Storage="_Bidder", ThisKey="userId", OtherKey="usrID", IsUnique=true, IsForeignKey=false)]
		public Bidder Bidder
		{
			get
			{
				return this._Bidder.Entity;
			}
			set
			{
				Bidder previousValue = this._Bidder.Entity;
				if (((previousValue != value) 
							|| (this._Bidder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bidder.Entity = null;
						previousValue.User = null;
					}
					this._Bidder.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Bidder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Settings(Setting entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Settings(Setting entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _addressId;
		
		private string _name;
		
		private string _line1;
		
		private string _line2;
		
		private string _city;
		
		private string _postcode;
		
		private string _state;
		
		private string _country;
		
		private string _contact;
		
		private int _memId;
		
		private char _status;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnaddressIdChanging(int value);
    partial void OnaddressIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Online1Changing(string value);
    partial void Online1Changed();
    partial void Online2Changing(string value);
    partial void Online2Changed();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnpostcodeChanging(string value);
    partial void OnpostcodeChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OncontactChanging(string value);
    partial void OncontactChanged();
    partial void OnmemIdChanging(int value);
    partial void OnmemIdChanged();
    partial void OnstatusChanging(char value);
    partial void OnstatusChanged();
    #endregion
		
		public Address()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int addressId
		{
			get
			{
				return this._addressId;
			}
			set
			{
				if ((this._addressId != value))
				{
					this.OnaddressIdChanging(value);
					this.SendPropertyChanging();
					this._addressId = value;
					this.SendPropertyChanged("addressId");
					this.OnaddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string line1
		{
			get
			{
				return this._line1;
			}
			set
			{
				if ((this._line1 != value))
				{
					this.Online1Changing(value);
					this.SendPropertyChanging();
					this._line1 = value;
					this.SendPropertyChanged("line1");
					this.Online1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line2", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string line2
		{
			get
			{
				return this._line2;
			}
			set
			{
				if ((this._line2 != value))
				{
					this.Online2Changing(value);
					this.SendPropertyChanging();
					this._line2 = value;
					this.SendPropertyChanged("line2");
					this.Online2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postcode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string postcode
		{
			get
			{
				return this._postcode;
			}
			set
			{
				if ((this._postcode != value))
				{
					this.OnpostcodeChanging(value);
					this.SendPropertyChanging();
					this._postcode = value;
					this.SendPropertyChanged("postcode");
					this.OnpostcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contact", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string contact
		{
			get
			{
				return this._contact;
			}
			set
			{
				if ((this._contact != value))
				{
					this.OncontactChanging(value);
					this.SendPropertyChanging();
					this._contact = value;
					this.SendPropertyChanged("contact");
					this.OncontactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memId", DbType="Int NOT NULL")]
		public int memId
		{
			get
			{
				return this._memId;
			}
			set
			{
				if ((this._memId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemIdChanging(value);
					this.SendPropertyChanging();
					this._memId = value;
					this.SendPropertyChanged("memId");
					this.OnmemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Char(1) NOT NULL")]
		public char status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Order", Storage="_Orders", ThisKey="addressId", OtherKey="addressId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Address", Storage="_User", ThisKey="memId", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._memId = value.userId;
					}
					else
					{
						this._memId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _orderId;
		
		private System.DateTime _orderDate;
		
		private System.Nullable<double> _charges;
		
		private System.Nullable<double> _discountPrice;
		
		private double _total;
		
		private char _status;
		
		private int _addressId;
		
		private System.Nullable<int> _preparationUserId;
		
		private System.Nullable<System.DateTime> _preparationDate;
		
		private System.Nullable<System.DateTime> _pickingDate;
		
		private System.Nullable<int> _deliveryUserId;
		
		private System.Nullable<System.DateTime> _deliveryDate;
		
		private EntitySet<Order_list> _Order_lists;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIdChanging(int value);
    partial void OnorderIdChanged();
    partial void OnorderDateChanging(System.DateTime value);
    partial void OnorderDateChanged();
    partial void OnchargesChanging(System.Nullable<double> value);
    partial void OnchargesChanged();
    partial void OndiscountPriceChanging(System.Nullable<double> value);
    partial void OndiscountPriceChanged();
    partial void OntotalChanging(double value);
    partial void OntotalChanged();
    partial void OnstatusChanging(char value);
    partial void OnstatusChanged();
    partial void OnaddressIdChanging(int value);
    partial void OnaddressIdChanged();
    partial void OnpreparationUserIdChanging(System.Nullable<int> value);
    partial void OnpreparationUserIdChanged();
    partial void OnpreparationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnpreparationDateChanged();
    partial void OnpickingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnpickingDateChanged();
    partial void OndeliveryUserIdChanging(System.Nullable<int> value);
    partial void OndeliveryUserIdChanged();
    partial void OndeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OndeliveryDateChanged();
    #endregion
		
		public Order()
		{
			this._Order_lists = new EntitySet<Order_list>(new Action<Order_list>(this.attach_Order_lists), new Action<Order_list>(this.detach_Order_lists));
			this._Address = default(EntityRef<Address>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int orderId
		{
			get
			{
				return this._orderId;
			}
			set
			{
				if ((this._orderId != value))
				{
					this.OnorderIdChanging(value);
					this.SendPropertyChanging();
					this._orderId = value;
					this.SendPropertyChanged("orderId");
					this.OnorderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderDate", DbType="DateTime NOT NULL")]
		public System.DateTime orderDate
		{
			get
			{
				return this._orderDate;
			}
			set
			{
				if ((this._orderDate != value))
				{
					this.OnorderDateChanging(value);
					this.SendPropertyChanging();
					this._orderDate = value;
					this.SendPropertyChanged("orderDate");
					this.OnorderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_charges", DbType="Float")]
		public System.Nullable<double> charges
		{
			get
			{
				return this._charges;
			}
			set
			{
				if ((this._charges != value))
				{
					this.OnchargesChanging(value);
					this.SendPropertyChanging();
					this._charges = value;
					this.SendPropertyChanged("charges");
					this.OnchargesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discountPrice", DbType="Float")]
		public System.Nullable<double> discountPrice
		{
			get
			{
				return this._discountPrice;
			}
			set
			{
				if ((this._discountPrice != value))
				{
					this.OndiscountPriceChanging(value);
					this.SendPropertyChanging();
					this._discountPrice = value;
					this.SendPropertyChanged("discountPrice");
					this.OndiscountPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total", DbType="Float NOT NULL")]
		public double total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Char(1) NOT NULL")]
		public char status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressId", DbType="Int NOT NULL")]
		public int addressId
		{
			get
			{
				return this._addressId;
			}
			set
			{
				if ((this._addressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaddressIdChanging(value);
					this.SendPropertyChanging();
					this._addressId = value;
					this.SendPropertyChanged("addressId");
					this.OnaddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_preparationUserId", DbType="Int")]
		public System.Nullable<int> preparationUserId
		{
			get
			{
				return this._preparationUserId;
			}
			set
			{
				if ((this._preparationUserId != value))
				{
					this.OnpreparationUserIdChanging(value);
					this.SendPropertyChanging();
					this._preparationUserId = value;
					this.SendPropertyChanged("preparationUserId");
					this.OnpreparationUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_preparationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> preparationDate
		{
			get
			{
				return this._preparationDate;
			}
			set
			{
				if ((this._preparationDate != value))
				{
					this.OnpreparationDateChanging(value);
					this.SendPropertyChanging();
					this._preparationDate = value;
					this.SendPropertyChanged("preparationDate");
					this.OnpreparationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pickingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> pickingDate
		{
			get
			{
				return this._pickingDate;
			}
			set
			{
				if ((this._pickingDate != value))
				{
					this.OnpickingDateChanging(value);
					this.SendPropertyChanging();
					this._pickingDate = value;
					this.SendPropertyChanged("pickingDate");
					this.OnpickingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deliveryUserId", DbType="Int")]
		public System.Nullable<int> deliveryUserId
		{
			get
			{
				return this._deliveryUserId;
			}
			set
			{
				if ((this._deliveryUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndeliveryUserIdChanging(value);
					this.SendPropertyChanging();
					this._deliveryUserId = value;
					this.SendPropertyChanged("deliveryUserId");
					this.OndeliveryUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deliveryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> deliveryDate
		{
			get
			{
				return this._deliveryDate;
			}
			set
			{
				if ((this._deliveryDate != value))
				{
					this.OndeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._deliveryDate = value;
					this.SendPropertyChanged("deliveryDate");
					this.OndeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Order_list", Storage="_Order_lists", ThisKey="orderId", OtherKey="orderId")]
		public EntitySet<Order_list> Order_lists
		{
			get
			{
				return this._Order_lists;
			}
			set
			{
				this._Order_lists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Order", Storage="_Address", ThisKey="addressId", OtherKey="addressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._addressId = value.addressId;
					}
					else
					{
						this._addressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_User", ThisKey="deliveryUserId", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._deliveryUserId = value.userId;
					}
					else
					{
						this._deliveryUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order_lists(Order_list entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Order_lists(Order_list entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _memId;
		
		private int _point;
		
		private int _userId;
		
		private System.Nullable<System.DateTime> _loginDate;
		
		private System.Nullable<System.DateTime> _registerDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmemIdChanging(int value);
    partial void OnmemIdChanged();
    partial void OnpointChanging(int value);
    partial void OnpointChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnloginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnloginDateChanged();
    partial void OnregisterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnregisterDateChanged();
    #endregion
		
		public Member()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int memId
		{
			get
			{
				return this._memId;
			}
			set
			{
				if ((this._memId != value))
				{
					this.OnmemIdChanging(value);
					this.SendPropertyChanging();
					this._memId = value;
					this.SendPropertyChanged("memId");
					this.OnmemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_point", DbType="Int NOT NULL")]
		public int point
		{
			get
			{
				return this._point;
			}
			set
			{
				if ((this._point != value))
				{
					this.OnpointChanging(value);
					this.SendPropertyChanging();
					this._point = value;
					this.SendPropertyChanged("point");
					this.OnpointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> loginDate
		{
			get
			{
				return this._loginDate;
			}
			set
			{
				if ((this._loginDate != value))
				{
					this.OnloginDateChanging(value);
					this.SendPropertyChanging();
					this._loginDate = value;
					this.SendPropertyChanged("loginDate");
					this.OnloginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Member", Storage="_User", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bidder")]
	public partial class Bidder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _usrID;
		
		private string _name;
		
		private System.Nullable<int> _delayTime;
		
		private System.Nullable<System.DateTime> _loginDate;
		
		private EntitySet<Quotation> _Quotations;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusrIDChanging(int value);
    partial void OnusrIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndelayTimeChanging(System.Nullable<int> value);
    partial void OndelayTimeChanged();
    partial void OnloginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnloginDateChanged();
    #endregion
		
		public Bidder()
		{
			this._Quotations = new EntitySet<Quotation>(new Action<Quotation>(this.attach_Quotations), new Action<Quotation>(this.detach_Quotations));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usrID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int usrID
		{
			get
			{
				return this._usrID;
			}
			set
			{
				if ((this._usrID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusrIDChanging(value);
					this.SendPropertyChanging();
					this._usrID = value;
					this.SendPropertyChanged("usrID");
					this.OnusrIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_delayTime", DbType="Int")]
		public System.Nullable<int> delayTime
		{
			get
			{
				return this._delayTime;
			}
			set
			{
				if ((this._delayTime != value))
				{
					this.OndelayTimeChanging(value);
					this.SendPropertyChanging();
					this._delayTime = value;
					this.SendPropertyChanged("delayTime");
					this.OndelayTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> loginDate
		{
			get
			{
				return this._loginDate;
			}
			set
			{
				if ((this._loginDate != value))
				{
					this.OnloginDateChanging(value);
					this.SendPropertyChanging();
					this._loginDate = value;
					this.SendPropertyChanged("loginDate");
					this.OnloginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bidder_Quotation", Storage="_Quotations", ThisKey="usrID", OtherKey="usrID")]
		public EntitySet<Quotation> Quotations
		{
			get
			{
				return this._Quotations;
			}
			set
			{
				this._Quotations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Bidder", Storage="_User", ThisKey="usrID", OtherKey="userId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Bidder = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Bidder = this;
						this._usrID = value.userId;
					}
					else
					{
						this._usrID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Quotations(Quotation entity)
		{
			this.SendPropertyChanging();
			entity.Bidder = this;
		}
		
		private void detach_Quotations(Quotation entity)
		{
			this.SendPropertyChanging();
			entity.Bidder = null;
		}
	}
}
#pragma warning restore 1591
